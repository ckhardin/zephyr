/*******************************************************************************
    CANopen Object Dictionary definition for CANopenNode V4

    This file was automatically generated by CANopenEditor v4.2.3-14-g1d5bbb7+1d5bbb7f67d82643e081cd8f017a47aba4620b1b

    https://github.com/CANopenNode/CANopenNode
    https://github.com/CANopenNode/CANopenEditor

    DON'T EDIT THIS FILE MANUALLY !!!!
********************************************************************************

    File info:
        File Names:   OD.h; OD.c
        Project File: objdict.xdd
        File Version: 1

        Created:      9/18/2019 2:52:00 PM
        Created By:   
        Modified:     3/27/2025 1:58:02 PM
        Modified By:  

    Device Info:
        Vendor Name:  
        Vendor ID:    0
        Product Name: Zephyr RTOS CANopen sample
        Product ID:   0

        Description:  
*******************************************************************************/

#ifndef OD_H
#define OD_H
/*******************************************************************************
    Counters of OD objects
*******************************************************************************/
#define OD_CNT_NMT 1
#define OD_CNT_EM 1
#define OD_CNT_SYNC 1
#define OD_CNT_SYNC_PROD 1
#define OD_CNT_STORAGE 1
#define OD_CNT_TIME 1
#define OD_CNT_EM_PROD 1
#define OD_CNT_HB_CONS 1
#define OD_CNT_HB_PROD 1
#define OD_CNT_SDO_SRV 1
#define OD_CNT_RPDO 4
#define OD_CNT_TPDO 4


/*******************************************************************************
    Sizes of OD arrays
*******************************************************************************/
#define OD_CNT_ARR_1003 8
#define OD_CNT_ARR_1010 1
#define OD_CNT_ARR_1011 1
#define OD_CNT_ARR_1016 4
#define OD_CNT_ARR_1029 6
#define OD_CNT_ARR_1F50 1
#define OD_CNT_ARR_1F51 1
#define OD_CNT_ARR_1F56 1
#define OD_CNT_ARR_1F57 1


/*******************************************************************************
    OD data declaration of all groups
*******************************************************************************/
typedef struct {
    uint32_t x1000_deviceType;
    uint32_t x1005_COB_ID_SYNCMessage;
    uint32_t x1006_communicationCyclePeriod;
    uint32_t x1007_synchronousWindowLength;
    char x1008_manufacturerDeviceName[24];
    char x1009_manufacturerHardwareVersion[5];
    char x100A_manufacturerSoftwareVersion[5];
    uint32_t x1014_COB_ID_EMCY;
    uint16_t x1015_inhibitTimeEMCY;
    uint8_t x1016_consumerHeartbeatTime_sub0;
    uint32_t x1016_consumerHeartbeatTime[OD_CNT_ARR_1016];
    uint16_t x1017_producerHeartbeatTime;
    struct {
        uint8_t maxSub_index;
        uint32_t vendor_ID;
        uint32_t productCode;
        uint32_t revisionNumber;
        uint32_t serialNumber;
    } x1018_identity;
    uint8_t x1019_synchronousCounterOverflowValue;
    uint8_t x1029_errorBehavior_sub0;
    uint8_t x1029_errorBehavior[OD_CNT_ARR_1029];
    struct {
        uint8_t maxSub_index;
        uint32_t COB_IDClientToServer;
        uint32_t COB_IDServerToClient;
    } x1200_SDOServerParameter;
    struct {
        uint8_t maxSub_index;
        uint32_t COB_IDUsedByRPDO;
        uint8_t transmissionType;
    } x1400_RPDOCommunicationParameter;
    struct {
        uint8_t maxSub_index;
        uint32_t COB_IDUsedByRPDO;
        uint8_t transmissionType;
    } x1401_RPDOCommunicationParameter;
    struct {
        uint8_t maxSub_index;
        uint32_t COB_IDUsedByRPDO;
        uint8_t transmissionType;
    } x1402_RPDOCommunicationParameter;
    struct {
        uint8_t maxSub_index;
        uint32_t COB_IDUsedByRPDO;
        uint8_t transmissionType;
    } x1403_RPDOCommunicationParameter;
    struct {
        uint8_t numberOfMappedObjects;
        uint32_t mappedObject1;
        uint32_t mappedObject2;
        uint32_t mappedObject3;
        uint32_t mappedObject4;
        uint32_t mappedObject5;
        uint32_t mappedObject6;
        uint32_t mappedObject7;
        uint32_t mappedObject8;
    } x1600_RPDOMappingParameter;
    struct {
        uint8_t numberOfMappedObjects;
        uint32_t mappedObject1;
        uint32_t mappedObject2;
        uint32_t mappedObject3;
        uint32_t mappedObject4;
        uint32_t mappedObject5;
        uint32_t mappedObject6;
        uint32_t mappedObject7;
        uint32_t mappedObject8;
    } x1601_RPDOMappingParameter;
    struct {
        uint8_t numberOfMappedObjects;
        uint32_t mappedObject1;
        uint32_t mappedObject2;
        uint32_t mappedObject3;
        uint32_t mappedObject4;
        uint32_t mappedObject5;
        uint32_t mappedObject6;
        uint32_t mappedObject7;
        uint32_t mappedObject8;
    } x1602_RPDOMappingParameter;
    struct {
        uint8_t numberOfMappedObjects;
        uint32_t mappedObject1;
        uint32_t mappedObject2;
        uint32_t mappedObject3;
        uint32_t mappedObject4;
        uint32_t mappedObject5;
        uint32_t mappedObject6;
        uint32_t mappedObject7;
        uint32_t mappedObject8;
    } x1603_RPDOMappingParameter;
    struct {
        uint8_t maxSub_index;
        uint32_t COB_IDUsedByTPDO;
        uint8_t transmissionType;
        uint16_t inhibitTime;
        uint8_t compatibilityEntry;
        uint16_t eventTimer;
        uint8_t SYNCStartValue;
    } x1800_TPDOCommunicationParameter;
    struct {
        uint8_t maxSub_index;
        uint32_t COB_IDUsedByTPDO;
        uint8_t transmissionType;
        uint16_t inhibitTime;
        uint8_t compatibilityEntry;
        uint16_t eventTimer;
        uint8_t SYNCStartValue;
    } x1801_TPDOCommunicationParameter;
    struct {
        uint8_t maxSub_index;
        uint32_t COB_IDUsedByTPDO;
        uint8_t transmissionType;
        uint16_t inhibitTime;
        uint8_t compatibilityEntry;
        uint16_t eventTimer;
        uint8_t SYNCStartValue;
    } x1802_TPDOCommunicationParameter;
    struct {
        uint8_t maxSub_index;
        uint32_t COB_IDUsedByTPDO;
        uint8_t transmissionType;
        uint16_t inhibitTime;
        uint8_t compatibilityEntry;
        uint16_t eventTimer;
        uint8_t SYNCStartValue;
    } x1803_TPDOCommunicationParameter;
    struct {
        uint8_t numberOfMappedObjects;
        uint32_t mappedObject1;
        uint32_t mappedObject2;
        uint32_t mappedObject3;
        uint32_t mappedObject4;
        uint32_t mappedObject5;
        uint32_t mappedObject6;
        uint32_t mappedObject7;
        uint32_t mappedObject8;
    } x1A00_TPDOMappingParameter;
    struct {
        uint8_t numberOfMappedObjects;
        uint32_t mappedObject1;
        uint32_t mappedObject2;
        uint32_t mappedObject3;
        uint32_t mappedObject4;
        uint32_t mappedObject5;
        uint32_t mappedObject6;
        uint32_t mappedObject7;
        uint32_t mappedObject8;
    } x1A01_TPDOMappingParameter;
    struct {
        uint8_t numberOfMappedObjects;
        uint32_t mappedObject1;
        uint32_t mappedObject2;
        uint32_t mappedObject3;
        uint32_t mappedObject4;
        uint32_t mappedObject5;
        uint32_t mappedObject6;
        uint32_t mappedObject7;
        uint32_t mappedObject8;
    } x1A02_TPDOMappingParameter;
    struct {
        uint8_t numberOfMappedObjects;
        uint32_t mappedObject1;
        uint32_t mappedObject2;
        uint32_t mappedObject3;
        uint32_t mappedObject4;
        uint32_t mappedObject5;
        uint32_t mappedObject6;
        uint32_t mappedObject7;
        uint32_t mappedObject8;
    } x1A03_TPDOMappingParameter;
    uint32_t x1F80_NMTStartup;
} OD_ROM_t;

typedef struct {
    uint8_t x1001_errorRegister;
    uint32_t x1002_manufacturerStatusRegister;
    uint8_t x1003_pre_definedErrorField_sub0;
    uint32_t x1003_pre_definedErrorField[OD_CNT_ARR_1003];
    uint8_t x1010_storeParameters_sub0;
    uint32_t x1010_storeParameters[OD_CNT_ARR_1010];
    uint8_t x1011_restoreDefaultParameters_sub0;
    uint32_t x1011_restoreDefaultParameters[OD_CNT_ARR_1011];
    uint8_t x1F50_programData_sub0;
    uint8_t x1F51_programControl_sub0;
    uint8_t x1F56_programSoftwareIdentification_sub0;
    uint8_t x1F57_flashStatusIdentification_sub0;
    uint8_t x2100_errorStatusBits[1];
    uint32_t x2102_buttonPressCounter;
} OD_RAM_t;

typedef struct {
    uint32_t x2101_power_onCounter;
} OD_EEPROM_t;

#ifndef OD_ATTR_ROM
#define OD_ATTR_ROM
#endif
extern OD_ATTR_ROM OD_ROM_t OD_ROM;

#ifndef OD_ATTR_RAM
#define OD_ATTR_RAM
#endif
extern OD_ATTR_RAM OD_RAM_t OD_RAM;

#ifndef OD_ATTR_EEPROM
#define OD_ATTR_EEPROM
#endif
extern OD_ATTR_EEPROM OD_EEPROM_t OD_EEPROM;

#ifndef OD_ATTR_OD
#define OD_ATTR_OD
#endif
extern OD_ATTR_OD OD_t *OD;


/*******************************************************************************
    Object dictionary entries - shortcuts
*******************************************************************************/
#define OD_ENTRY_H1000 &OD->list[0]
#define OD_ENTRY_H1001 &OD->list[1]
#define OD_ENTRY_H1002 &OD->list[2]
#define OD_ENTRY_H1003 &OD->list[3]
#define OD_ENTRY_H1005 &OD->list[4]
#define OD_ENTRY_H1006 &OD->list[5]
#define OD_ENTRY_H1007 &OD->list[6]
#define OD_ENTRY_H1008 &OD->list[7]
#define OD_ENTRY_H1009 &OD->list[8]
#define OD_ENTRY_H100A &OD->list[9]
#define OD_ENTRY_H1010 &OD->list[10]
#define OD_ENTRY_H1011 &OD->list[11]
#define OD_ENTRY_H1012 &OD->list[12]
#define OD_ENTRY_H1014 &OD->list[13]
#define OD_ENTRY_H1015 &OD->list[14]
#define OD_ENTRY_H1016 &OD->list[15]
#define OD_ENTRY_H1017 &OD->list[16]
#define OD_ENTRY_H1018 &OD->list[17]
#define OD_ENTRY_H1019 &OD->list[18]
#define OD_ENTRY_H1029 &OD->list[19]
#define OD_ENTRY_H1200 &OD->list[20]
#define OD_ENTRY_H1400 &OD->list[21]
#define OD_ENTRY_H1401 &OD->list[22]
#define OD_ENTRY_H1402 &OD->list[23]
#define OD_ENTRY_H1403 &OD->list[24]
#define OD_ENTRY_H1600 &OD->list[25]
#define OD_ENTRY_H1601 &OD->list[26]
#define OD_ENTRY_H1602 &OD->list[27]
#define OD_ENTRY_H1603 &OD->list[28]
#define OD_ENTRY_H1800 &OD->list[29]
#define OD_ENTRY_H1801 &OD->list[30]
#define OD_ENTRY_H1802 &OD->list[31]
#define OD_ENTRY_H1803 &OD->list[32]
#define OD_ENTRY_H1A00 &OD->list[33]
#define OD_ENTRY_H1A01 &OD->list[34]
#define OD_ENTRY_H1A02 &OD->list[35]
#define OD_ENTRY_H1A03 &OD->list[36]
#define OD_ENTRY_H1F50 &OD->list[37]
#define OD_ENTRY_H1F51 &OD->list[38]
#define OD_ENTRY_H1F56 &OD->list[39]
#define OD_ENTRY_H1F57 &OD->list[40]
#define OD_ENTRY_H1F80 &OD->list[41]
#define OD_ENTRY_H2100 &OD->list[42]
#define OD_ENTRY_H2101 &OD->list[43]
#define OD_ENTRY_H2102 &OD->list[44]


/*******************************************************************************
    Object dictionary entries - shortcuts with names
*******************************************************************************/
#define OD_ENTRY_H1000_deviceType &OD->list[0]
#define OD_ENTRY_H1001_errorRegister &OD->list[1]
#define OD_ENTRY_H1002_manufacturerStatusRegister &OD->list[2]
#define OD_ENTRY_H1003_pre_definedErrorField &OD->list[3]
#define OD_ENTRY_H1005_COB_ID_SYNCMessage &OD->list[4]
#define OD_ENTRY_H1006_communicationCyclePeriod &OD->list[5]
#define OD_ENTRY_H1007_synchronousWindowLength &OD->list[6]
#define OD_ENTRY_H1008_manufacturerDeviceName &OD->list[7]
#define OD_ENTRY_H1009_manufacturerHardwareVersion &OD->list[8]
#define OD_ENTRY_H100A_manufacturerSoftwareVersion &OD->list[9]
#define OD_ENTRY_H1010_storeParameters &OD->list[10]
#define OD_ENTRY_H1011_restoreDefaultParameters &OD->list[11]
#define OD_ENTRY_H1012_COB_ID_TIME &OD->list[12]
#define OD_ENTRY_H1014_COB_ID_EMCY &OD->list[13]
#define OD_ENTRY_H1015_inhibitTimeEMCY &OD->list[14]
#define OD_ENTRY_H1016_consumerHeartbeatTime &OD->list[15]
#define OD_ENTRY_H1017_producerHeartbeatTime &OD->list[16]
#define OD_ENTRY_H1018_identity &OD->list[17]
#define OD_ENTRY_H1019_synchronousCounterOverflowValue &OD->list[18]
#define OD_ENTRY_H1029_errorBehavior &OD->list[19]
#define OD_ENTRY_H1200_SDOServerParameter &OD->list[20]
#define OD_ENTRY_H1400_RPDOCommunicationParameter &OD->list[21]
#define OD_ENTRY_H1401_RPDOCommunicationParameter &OD->list[22]
#define OD_ENTRY_H1402_RPDOCommunicationParameter &OD->list[23]
#define OD_ENTRY_H1403_RPDOCommunicationParameter &OD->list[24]
#define OD_ENTRY_H1600_RPDOMappingParameter &OD->list[25]
#define OD_ENTRY_H1601_RPDOMappingParameter &OD->list[26]
#define OD_ENTRY_H1602_RPDOMappingParameter &OD->list[27]
#define OD_ENTRY_H1603_RPDOMappingParameter &OD->list[28]
#define OD_ENTRY_H1800_TPDOCommunicationParameter &OD->list[29]
#define OD_ENTRY_H1801_TPDOCommunicationParameter &OD->list[30]
#define OD_ENTRY_H1802_TPDOCommunicationParameter &OD->list[31]
#define OD_ENTRY_H1803_TPDOCommunicationParameter &OD->list[32]
#define OD_ENTRY_H1A00_TPDOMappingParameter &OD->list[33]
#define OD_ENTRY_H1A01_TPDOMappingParameter &OD->list[34]
#define OD_ENTRY_H1A02_TPDOMappingParameter &OD->list[35]
#define OD_ENTRY_H1A03_TPDOMappingParameter &OD->list[36]
#define OD_ENTRY_H1F50_programData &OD->list[37]
#define OD_ENTRY_H1F51_programControl &OD->list[38]
#define OD_ENTRY_H1F56_programSoftwareIdentification &OD->list[39]
#define OD_ENTRY_H1F57_flashStatusIdentification &OD->list[40]
#define OD_ENTRY_H1F80_NMTStartup &OD->list[41]
#define OD_ENTRY_H2100_errorStatusBits &OD->list[42]
#define OD_ENTRY_H2101_power_onCounter &OD->list[43]
#define OD_ENTRY_H2102_buttonPressCounter &OD->list[44]


/*******************************************************************************
    OD config structure
*******************************************************************************/
#ifdef CO_MULTIPLE_OD
#define OD_INIT_CONFIG(config) {\
    (config).CNT_NMT = OD_CNT_NMT;\
    (config).ENTRY_H1017 = OD_ENTRY_H1017;\
    (config).CNT_HB_CONS = OD_CNT_HB_CONS;\
    (config).CNT_ARR_1016 = OD_CNT_ARR_1016;\
    (config).ENTRY_H1016 = OD_ENTRY_H1016;\
    (config).CNT_EM = OD_CNT_EM;\
    (config).ENTRY_H1001 = OD_ENTRY_H1001;\
    (config).ENTRY_H1014 = OD_ENTRY_H1014;\
    (config).ENTRY_H1015 = OD_ENTRY_H1015;\
    (config).CNT_ARR_1003 = OD_CNT_ARR_1003;\
    (config).ENTRY_H1003 = OD_ENTRY_H1003;\
    (config).CNT_SDO_SRV = OD_CNT_SDO_SRV;\
    (config).ENTRY_H1200 = OD_ENTRY_H1200;\
    (config).CNT_SDO_CLI = 0;\
    (config).ENTRY_H1280 = NULL;\
    (config).CNT_TIME = OD_CNT_TIME;\
    (config).ENTRY_H1012 = OD_ENTRY_H1012;\
    (config).CNT_SYNC = OD_CNT_SYNC;\
    (config).ENTRY_H1005 = OD_ENTRY_H1005;\
    (config).ENTRY_H1006 = OD_ENTRY_H1006;\
    (config).ENTRY_H1007 = OD_ENTRY_H1007;\
    (config).ENTRY_H1019 = OD_ENTRY_H1019;\
    (config).CNT_RPDO = OD_CNT_RPDO;\
    (config).ENTRY_H1400 = OD_ENTRY_H1400;\
    (config).ENTRY_H1600 = OD_ENTRY_H1600;\
    (config).CNT_TPDO = OD_CNT_TPDO;\
    (config).ENTRY_H1800 = OD_ENTRY_H1800;\
    (config).ENTRY_H1A00 = OD_ENTRY_H1A00;\
    (config).CNT_LEDS = 0;\
    (config).CNT_GFC = 0;\
    (config).ENTRY_H1300 = NULL;\
    (config).CNT_SRDO = 0;\
    (config).ENTRY_H1301 = NULL;\
    (config).ENTRY_H1381 = NULL;\
    (config).ENTRY_H13FE = NULL;\
    (config).ENTRY_H13FF = NULL;\
    (config).CNT_LSS_SLV = 0;\
    (config).CNT_LSS_MST = 0;\
    (config).CNT_GTWA = 0;\
    (config).CNT_TRACE = 0;\
}
#endif

#endif /* OD_H */
